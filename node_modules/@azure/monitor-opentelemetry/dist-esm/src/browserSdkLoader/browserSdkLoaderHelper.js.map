{"version":3,"file":"browserSdkLoaderHelper.js","sourceRoot":"","sources":["../../../src/browserSdkLoader/browserSdkLoaderHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import * as zlib from \"zlib\";\nimport { promisify } from \"util\";\nimport * as http from \"http\";\n\n// currently support the following encoding types\nexport enum contentEncodingMethod {\n  GZIP = \"gzip\",\n  DEFLATE = \"deflate\",\n  BR = \"br\",\n}\n\n//current supported encoding types\nexport const bufferEncodingTypes = [\n  \"utf8\",\n  \"utf16le\",\n  \"latin1\",\n  \"base64\",\n  \"hex\",\n  \"ascii\",\n  \"binary\",\n  \"ucs2\",\n];\n\n//for node version under 10, Brotli compression is not supported.\nexport const isBrotliSupported = (): boolean => {\n  const majVer = process.versions.node.split(\".\")[0];\n  return parseInt(majVer) >= 10;\n};\n\nexport const gzipAsync = promisify(zlib.gzip);\nexport const gunzipAsync = promisify(zlib.gunzip);\nexport const deflateAsync = promisify(zlib.deflate);\nexport const inflateAsync = promisify(zlib.inflate);\n\nexport const getBrotliCompressAsync = (zlibObject: any): Function | null => {\n  let isMajorVer = isBrotliSupported();\n  if (isMajorVer && typeof zlibObject.brotliCompress === \"function\") {\n    return promisify(zlibObject.brotliCompress);\n  }\n  return null;\n};\n\nexport const getBrotliCompressSync = (zlibObject: any): Function | null => {\n  let isMajorVer = isBrotliSupported();\n  if (isMajorVer && typeof zlibObject.brotliCompressSync === \"function\") {\n    return zlibObject.brotliCompressSync;\n  }\n  return null;\n};\n\nexport const getBrotliDecompressAsync = (zlibObject: any): Function | null => {\n  let isMajorVer = isBrotliSupported();\n  if (isMajorVer && typeof zlibObject.brotliDecompress === \"function\") {\n    return promisify(zlibObject.brotliDecompress);\n  }\n  return null;\n};\n\nexport const getBrotliDecompressSync = (zlibObject: any): Function | null => {\n  let isMajorVer = isBrotliSupported();\n  if (isMajorVer && typeof zlibObject.brotliDecompressSync === \"function\") {\n    return zlibObject.brotliDecompressSync;\n  }\n  return null;\n};\n\nexport const isBufferType = (buffer: Buffer, type?: string): boolean | null => {\n  let encodingType = type ? type : \"utf8\";\n  let result = false;\n  if (Buffer.isEncoding(encodingType)) {\n    let newBuffer = Buffer.from(buffer.toString(encodingType), encodingType);\n    result = newBuffer.toJSON().data.toString() === buffer.toJSON().data.toString();\n  }\n\n  return result;\n};\n\nexport const findBufferEncodingType = (buffer: Buffer): string | null => {\n  let bufferType = null;\n  for (let key in bufferEncodingTypes) {\n    let type = bufferEncodingTypes[key];\n    if (Buffer.isEncoding(type) && isBufferType(buffer, type)) {\n      bufferType = type;\n      break;\n    }\n  }\n  return bufferType;\n};\n\nexport const isSupportedContentEncoding = (\n  encodingMethod: string,\n): contentEncodingMethod | null => {\n  let encodingType = null;\n  switch (encodingMethod) {\n    case \"gzip\":\n      encodingType = contentEncodingMethod.GZIP;\n      break;\n    case \"br\":\n      encodingType = contentEncodingMethod.BR;\n      break;\n    case \"deflate\":\n      encodingType = contentEncodingMethod.DEFLATE;\n      break;\n    default:\n  }\n  return encodingType;\n};\n\n// mutiple content-encoding is not supported\n// for mutiple content-encoding, this method will return any empty array\nexport const getContentEncodingFromHeaders = (\n  response: http.ServerResponse,\n): contentEncodingMethod[] | null => {\n  let headers: contentEncodingMethod[] = [];\n  let contentEncodingHeaders = response.getHeader(\"Content-Encoding\");\n  if (!contentEncodingHeaders) return null;\n  if (typeof contentEncodingHeaders === \"string\") {\n    let supportedContentEncoding = isSupportedContentEncoding(contentEncodingHeaders);\n    if (supportedContentEncoding) {\n      headers.push(supportedContentEncoding);\n    }\n  }\n  return headers;\n};\n\nexport const insertBrowserSdkLoaderByIndex = (\n  index: number,\n  html: string,\n  snippet: string,\n): string | null => {\n  if (index < 0) return null;\n  let newHtml = null;\n  let subStart = html.substring(0, index);\n  let subEnd = html.substring(index);\n  newHtml = subStart + '<script type=\"text/javascript\">' + snippet + \"</script>\" + subEnd;\n  return newHtml;\n};\n\nexport const isContentTypeHeaderHtml = (response: http.ServerResponse): boolean => {\n  let isHtml = false;\n  let contentType = response.getHeader(\"Content-Type\");\n  if (contentType) {\n    if (typeof contentType === \"string\") {\n      isHtml = contentType.indexOf(\"html\") >= 0;\n    } else {\n      isHtml = contentType.toString().indexOf(\"html\") >= 0;\n    }\n  }\n  return isHtml;\n};\n"]}