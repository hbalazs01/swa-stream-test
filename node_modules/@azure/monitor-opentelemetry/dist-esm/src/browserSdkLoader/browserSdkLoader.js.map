{"version":3,"file":"browserSdkLoader.js","sourceRoot":"","sources":["../../../src/browserSdkLoader/browserSdkLoader.ts"],"names":[],"mappings":"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","sourcesContent":["import http from \"http\";\nimport https from \"https\";\nimport { webSnippet as sdkLoader } from \"@microsoft/applicationinsights-web-snippet\";\nimport * as browserSdkLoaderHelper from \"./browserSdkLoaderHelper\";\nimport * as prefixHelper from \"../utils/common\";\nimport * as zlib from \"zlib\";\nimport { InternalConfig } from \"../shared\";\nimport { ConnectionStringParser } from \"../utils/connectionStringParser\";\nimport { IncomingMessage, ServerResponse } from \"http\";\nimport { Logger } from \"../shared/logging/logger\";\nimport { BROWSER_SDK_LOADER_DEFAULT_SOURCE } from \"../types\";\nimport { diag } from \"@opentelemetry/api\";\n\nexport class BrowserSdkLoader {\n  private static _instance: BrowserSdkLoader | null;\n\n  private static _sdkLoader: string;\n  private static _aiUrl: string;\n  private _isIkeyValid: boolean = true;\n  private _isInitialized: boolean = false;\n  private _browserSdkLoaderIkey?: string;\n\n  constructor(config: InternalConfig) {\n    if (!!BrowserSdkLoader._instance) {\n      diag.warn(\"Browser SDK Loader should be configured from the applicationInsights object\");\n    }\n\n    BrowserSdkLoader._instance = this;\n    // AI URL used to validate if sdk loader already included\n    BrowserSdkLoader._aiUrl = BROWSER_SDK_LOADER_DEFAULT_SOURCE;\n    let clientWebIkey;\n    if (config.browserSdkLoaderOptions?.connectionString) {\n      clientWebIkey = this._getBrowserSdkLoaderIkey(\n        config?.browserSdkLoaderOptions?.connectionString,\n      );\n    }\n    this._browserSdkLoaderIkey =\n      clientWebIkey ||\n      ConnectionStringParser.parse(config.azureMonitorExporterOptions.connectionString)\n        .instrumentationkey;\n\n    if (this._isIkeyValid) {\n      this._initialize();\n    }\n  }\n\n  public isInitialized() {\n    return this._isInitialized;\n  }\n\n  public static getInstance(): BrowserSdkLoader {\n    return BrowserSdkLoader._instance!;\n  }\n\n  private _getBrowserSdkLoaderIkey(connectionString: string) {\n    let iKey = null;\n    try {\n      const csCode = ConnectionStringParser.parse(connectionString);\n      const iKeyCode = csCode.instrumentationkey || \"\";\n      if (!ConnectionStringParser.validateInstrumentationKey(iKeyCode)) {\n        this._isIkeyValid = false;\n        Logger.getInstance().info(\n          \"Invalid browser SDK loader connection string, browser SDK loader is not enabled.\",\n        );\n      } else {\n        this._isIkeyValid = true;\n        iKey = iKeyCode;\n      }\n    } catch (err) {\n      Logger.getInstance().info(\"get browser SDK loader ikey error: \" + err);\n    }\n    return iKey;\n  }\n\n  /**\n   * Gets string to inject into the web page\n   * @returns The string to inject into the web page\n   */\n  private _getBrowserSdkLoaderReplacedStr() {\n    let osStr = prefixHelper.getOsPrefix();\n    let rpStr = prefixHelper.getResourceProvider();\n    let sdkLoaderReplacedStr = `${this._browserSdkLoaderIkey}\\\",\\r\\n disableIkeyDeprecationMessage: true,\\r\\n sdkExtension: \\\"${rpStr}${osStr}d_n_`;\n    let replacedSdkLoader = sdkLoader.replace(\"INSTRUMENTATION_KEY\", sdkLoaderReplacedStr);\n    return replacedSdkLoader;\n  }\n\n  private _initialize() {\n    this._isInitialized = true;\n    BrowserSdkLoader._sdkLoader = this._getBrowserSdkLoaderReplacedStr();\n    const originalHttpServer = http.createServer;\n    const originalHttpsServer = https.createServer;\n\n    (http.createServer as any) = (\n      requestListener?: (request: IncomingMessage, response: ServerResponse) => void,\n    ) => {\n      const originalRequestListener = requestListener;\n      if (originalRequestListener) {\n        requestListener = (request: IncomingMessage, response: ServerResponse) => {\n          // Patch response write method\n          let originalResponseWrite = response.write;\n          let isGetRequest = request.method == \"GET\";\n          response.write = function wrap(a: Buffer | string, b?: Function | string) {\n            //only patch GET request\n            try {\n              if (isGetRequest) {\n                let headers = browserSdkLoaderHelper.getContentEncodingFromHeaders(response);\n                let writeBufferType = undefined;\n                if (typeof b === \"string\") {\n                  writeBufferType = b;\n                }\n                if (headers === null || headers === undefined) {\n                  if (BrowserSdkLoader._instance?.ValidateInjection(response, a)) {\n                    arguments[0] = BrowserSdkLoader._instance.InjectSdkLoader(\n                      response,\n                      a,\n                      undefined,\n                      writeBufferType,\n                    );\n                  }\n                } else if (headers.length) {\n                  let encodeType = headers[0];\n                  arguments[0] = BrowserSdkLoader._instance?.InjectSdkLoader(\n                    response,\n                    a,\n                    encodeType,\n                  );\n                }\n              }\n            } catch (err) {\n              Logger.getInstance().warn(\"Inject browser sdk loader error: \" + err);\n            }\n            return originalResponseWrite.apply(response, arguments as any);\n          };\n\n          // Patch response end method for cases when HTML is added there\n          let originalResponseEnd = response.end;\n\n          (response.end as any) = function wrap(a?: Buffer | string | any, b?: Function) {\n            if (isGetRequest) {\n              try {\n                if (isGetRequest) {\n                  let headers = browserSdkLoaderHelper.getContentEncodingFromHeaders(response);\n                  let endBufferType = undefined;\n                  if (typeof b === \"string\") {\n                    endBufferType = b;\n                  }\n                  if (headers === null || headers === undefined) {\n                    if (BrowserSdkLoader._instance?.ValidateInjection(response, a)) {\n                      arguments[0] = BrowserSdkLoader._instance.InjectSdkLoader(\n                        response,\n                        a,\n                        undefined,\n                        endBufferType,\n                      );\n                    }\n                  } else if (headers.length) {\n                    let encodeType = headers[0];\n                    arguments[0] = BrowserSdkLoader._instance?.InjectSdkLoader(\n                      response,\n                      a,\n                      encodeType,\n                    );\n                  }\n                }\n              } catch (err) {\n                Logger.getInstance().warn(\"Inject browser sdk loader error: \" + err);\n              }\n            }\n            return originalResponseEnd.apply(response, arguments as any);\n          };\n\n          return originalRequestListener(request, response);\n        };\n      }\n      return originalHttpServer(requestListener);\n    };\n\n    (https.createServer as any) = function (options: any, httpsRequestListener: any): any {\n      const originalHttpsRequestListener = httpsRequestListener;\n      if (originalHttpsRequestListener) {\n        httpsRequestListener = function (req: any, res: any) {\n          let isGetHttpsRequest = req.method == \"GET\";\n          let originalHttpsResponseWrite = res.write;\n          let originalHttpsResponseEnd = res.end;\n          res.write = function wrap(a: Buffer | string | any, b?: Function | string) {\n            try {\n              if (isGetHttpsRequest) {\n                let headers = browserSdkLoaderHelper.getContentEncodingFromHeaders(res);\n                let writeBufferType = undefined;\n                if (typeof b === \"string\") {\n                  writeBufferType = b;\n                }\n                if (headers === null || headers === undefined) {\n                  if (BrowserSdkLoader._instance?.ValidateInjection(res, a)) {\n                    arguments[0] = this.InjectSdkLoader(res, a, undefined, writeBufferType);\n                  }\n                } else if (headers.length) {\n                  let encodeType = headers[0];\n                  arguments[0] = BrowserSdkLoader._instance?.InjectSdkLoader(res, a, encodeType);\n                }\n              }\n            } catch (err) {\n              Logger.getInstance().warn(\"Inject SDK loader error: \" + err);\n            }\n            return originalHttpsResponseWrite.apply(res, arguments);\n          };\n\n          res.end = function wrap(a: Buffer | string | any, b?: Function | string) {\n            try {\n              if (isGetHttpsRequest) {\n                let headers = browserSdkLoaderHelper.getContentEncodingFromHeaders(res);\n                let endBufferType = undefined;\n                if (typeof b === \"string\") {\n                  endBufferType = b;\n                }\n                if (headers === null || headers === undefined) {\n                  if (BrowserSdkLoader._instance?.ValidateInjection(res, a)) {\n                    arguments[0] = BrowserSdkLoader._instance.InjectSdkLoader(\n                      res,\n                      a,\n                      undefined,\n                      endBufferType,\n                    );\n                  }\n                } else if (headers.length) {\n                  let encodeType = headers[0];\n                  arguments[0] = BrowserSdkLoader._instance?.InjectSdkLoader(res, a, encodeType);\n                }\n              }\n            } catch (err) {\n              Logger.getInstance().warn(\"Inject SDK loader error: \" + err);\n            }\n            return originalHttpsResponseEnd.apply(res, arguments);\n          };\n          return originalHttpsRequestListener(req, res);\n        };\n        return originalHttpsServer(options, httpsRequestListener);\n      }\n    };\n  }\n\n  /**\n   * Validate response and try to inject Browser SDK Loader\n   */\n  public ValidateInjection(response: any, input: string | Buffer): boolean {\n    try {\n      if (!response || !input || response.statusCode != 200) return false;\n      let isContentHtml = browserSdkLoaderHelper.isContentTypeHeaderHtml(response);\n      if (!isContentHtml) return false;\n      let inputStr = input.slice().toString();\n      if (inputStr.indexOf(\"<head>\") >= 0 && inputStr.indexOf(\"</head>\") >= 0) {\n        // Check if sdk loader not already present looking for AI Web SDK URL\n        if (inputStr.indexOf(BrowserSdkLoader._aiUrl) < 0) {\n          return true;\n        }\n      }\n    } catch (err) {\n      Logger.getInstance().info(\"validate injections error: \" + err);\n    }\n    return false;\n  }\n\n  /**\n   * Inject Browser SDK Loader\n   */\n  public InjectSdkLoader(\n    response: any,\n    input: string | Buffer,\n    encodeType?: browserSdkLoaderHelper.contentEncodingMethod,\n    bufferEncodeType?: string,\n  ): string | Buffer {\n    try {\n      let isCompressedBuffer = !!encodeType;\n      if (!isCompressedBuffer) {\n        let html = input.toString();\n        let index = html.indexOf(\"</head>\");\n        if (index < 0) return input;\n\n        let newHtml = browserSdkLoaderHelper.insertBrowserSdkLoaderByIndex(\n          index,\n          html,\n          BrowserSdkLoader._sdkLoader,\n        );\n        if (typeof input === \"string\") {\n          response.removeHeader(\"Content-Length\");\n          if (newHtml) {\n            input = newHtml;\n          }\n          response.setHeader(\"Content-Length\", Buffer.byteLength(input));\n        } else if (Buffer.isBuffer(input)) {\n          let bufferType = bufferEncodeType ? bufferEncodeType : \"utf8\";\n          let isValidBufferType = browserSdkLoaderHelper.isBufferType(input, bufferType);\n          if (isValidBufferType && newHtml) {\n            response.removeHeader(\"Content-Length\");\n            let encodedString = Buffer.from(newHtml).toString(bufferType as BufferEncoding);\n            input = Buffer.from(encodedString, bufferType as BufferEncoding);\n            response.setHeader(\"Content-Length\", input.length);\n          }\n        }\n      } else {\n        response.removeHeader(\"Content-Length\");\n        input = this._getInjectedCompressBuffer(\n          response,\n          input as Buffer,\n          encodeType as browserSdkLoaderHelper.contentEncodingMethod,\n        );\n        response.setHeader(\"Content-Length\", input.length);\n      }\n    } catch (ex) {\n      Logger.getInstance().warn(\n        \"Failed to inject browser sdk loader and change content-length headers. Exception:\" + ex,\n      );\n    }\n    return input;\n  }\n\n  //***********************\n  // should NOT use sync functions here. But currently cannot get async functions to work\n  // because reponse.write return boolean\n  // and also this function do not support partial compression as well\n  // need more investigation\n  private _getInjectedCompressBuffer(\n    response: any,\n    input: Buffer,\n    encodeType: browserSdkLoaderHelper.contentEncodingMethod,\n  ): Buffer {\n    try {\n      switch (encodeType) {\n        case browserSdkLoaderHelper.contentEncodingMethod.GZIP:\n          let gunzipBuffer = zlib.gunzipSync(input);\n          if (this.ValidateInjection(response, gunzipBuffer)) {\n            let injectedGunzipBuffer = this.InjectSdkLoader(response, gunzipBuffer);\n            input = zlib.gzipSync(injectedGunzipBuffer);\n          }\n          break;\n        case browserSdkLoaderHelper.contentEncodingMethod.DEFLATE:\n          let inflateBuffer = zlib.inflateSync(input);\n          if (this.ValidateInjection(response, inflateBuffer)) {\n            let injectedInflateBuffer = this.InjectSdkLoader(response, inflateBuffer);\n            input = zlib.deflateSync(injectedInflateBuffer);\n          }\n          break;\n        case browserSdkLoaderHelper.contentEncodingMethod.BR:\n          let BrotliDecompressSync = browserSdkLoaderHelper.getBrotliDecompressSync(zlib);\n          let BrotliCompressSync = browserSdkLoaderHelper.getBrotliCompressSync(zlib);\n          if (BrotliDecompressSync && BrotliCompressSync) {\n            let decompressBuffer = BrotliDecompressSync(input);\n            if (this.ValidateInjection(response, decompressBuffer)) {\n              let injectedDecompressBuffer = this.InjectSdkLoader(response, decompressBuffer);\n              input = BrotliCompressSync(injectedDecompressBuffer);\n            }\n            break;\n          }\n      }\n    } catch (err) {\n      Logger.getInstance().info(\"get browser SDK loader compress buffer error: \" + err);\n    }\n\n    return input;\n  }\n\n  public dispose() {\n    BrowserSdkLoader._instance = null;\n    this._isInitialized = false;\n  }\n}\n"]}