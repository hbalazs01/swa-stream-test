import * as zlib from "zlib";
import { promisify } from "util";
// currently support the following encoding types
export var contentEncodingMethod;
(function (contentEncodingMethod) {
    contentEncodingMethod["GZIP"] = "gzip";
    contentEncodingMethod["DEFLATE"] = "deflate";
    contentEncodingMethod["BR"] = "br";
})(contentEncodingMethod || (contentEncodingMethod = {}));
//current supported encoding types
export const bufferEncodingTypes = [
    "utf8",
    "utf16le",
    "latin1",
    "base64",
    "hex",
    "ascii",
    "binary",
    "ucs2",
];
//for node version under 10, Brotli compression is not supported.
export const isBrotliSupported = () => {
    const majVer = process.versions.node.split(".")[0];
    return parseInt(majVer) >= 10;
};
export const gzipAsync = promisify(zlib.gzip);
export const gunzipAsync = promisify(zlib.gunzip);
export const deflateAsync = promisify(zlib.deflate);
export const inflateAsync = promisify(zlib.inflate);
export const getBrotliCompressAsync = (zlibObject) => {
    let isMajorVer = isBrotliSupported();
    if (isMajorVer && typeof zlibObject.brotliCompress === "function") {
        return promisify(zlibObject.brotliCompress);
    }
    return null;
};
export const getBrotliCompressSync = (zlibObject) => {
    let isMajorVer = isBrotliSupported();
    if (isMajorVer && typeof zlibObject.brotliCompressSync === "function") {
        return zlibObject.brotliCompressSync;
    }
    return null;
};
export const getBrotliDecompressAsync = (zlibObject) => {
    let isMajorVer = isBrotliSupported();
    if (isMajorVer && typeof zlibObject.brotliDecompress === "function") {
        return promisify(zlibObject.brotliDecompress);
    }
    return null;
};
export const getBrotliDecompressSync = (zlibObject) => {
    let isMajorVer = isBrotliSupported();
    if (isMajorVer && typeof zlibObject.brotliDecompressSync === "function") {
        return zlibObject.brotliDecompressSync;
    }
    return null;
};
export const isBufferType = (buffer, type) => {
    let encodingType = type ? type : "utf8";
    let result = false;
    if (Buffer.isEncoding(encodingType)) {
        let newBuffer = Buffer.from(buffer.toString(encodingType), encodingType);
        result = newBuffer.toJSON().data.toString() === buffer.toJSON().data.toString();
    }
    return result;
};
export const findBufferEncodingType = (buffer) => {
    let bufferType = null;
    for (let key in bufferEncodingTypes) {
        let type = bufferEncodingTypes[key];
        if (Buffer.isEncoding(type) && isBufferType(buffer, type)) {
            bufferType = type;
            break;
        }
    }
    return bufferType;
};
export const isSupportedContentEncoding = (encodingMethod) => {
    let encodingType = null;
    switch (encodingMethod) {
        case "gzip":
            encodingType = contentEncodingMethod.GZIP;
            break;
        case "br":
            encodingType = contentEncodingMethod.BR;
            break;
        case "deflate":
            encodingType = contentEncodingMethod.DEFLATE;
            break;
        default:
    }
    return encodingType;
};
// mutiple content-encoding is not supported
// for mutiple content-encoding, this method will return any empty array
export const getContentEncodingFromHeaders = (response) => {
    let headers = [];
    let contentEncodingHeaders = response.getHeader("Content-Encoding");
    if (!contentEncodingHeaders)
        return null;
    if (typeof contentEncodingHeaders === "string") {
        let supportedContentEncoding = isSupportedContentEncoding(contentEncodingHeaders);
        if (supportedContentEncoding) {
            headers.push(supportedContentEncoding);
        }
    }
    return headers;
};
export const insertBrowserSdkLoaderByIndex = (index, html, snippet) => {
    if (index < 0)
        return null;
    let newHtml = null;
    let subStart = html.substring(0, index);
    let subEnd = html.substring(index);
    newHtml = subStart + '<script type="text/javascript">' + snippet + "</script>" + subEnd;
    return newHtml;
};
export const isContentTypeHeaderHtml = (response) => {
    let isHtml = false;
    let contentType = response.getHeader("Content-Type");
    if (contentType) {
        if (typeof contentType === "string") {
            isHtml = contentType.indexOf("html") >= 0;
        }
        else {
            isHtml = contentType.toString().indexOf("html") >= 0;
        }
    }
    return isHtml;
};
//# sourceMappingURL=browserSdkLoaderHelper.js.map