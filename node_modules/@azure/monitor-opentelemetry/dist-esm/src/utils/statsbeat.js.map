{"version":3,"file":"statsbeat.js","sourceRoot":"","sources":["../../../src/utils/statsbeat.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AZURE_MONITOR_STATSBEAT_FEATURES,\n  StatsbeatFeature,\n  StatsbeatInstrumentation,\n  StatsbeatOptions,\n} from \"../types\";\nimport { Logger as InternalLogger } from \"../shared/logging\";\n\nlet instance: StatsbeatConfiguration;\n\nclass StatsbeatConfiguration {\n  // Initial Statsbeat options\n  private currentStatsbeatOptions: StatsbeatOptions = {};\n  private initializedByShim = false;\n\n  constructor() {\n    // Check for shim initialization upon construction\n    try {\n      if (\n        JSON.parse(process.env[AZURE_MONITOR_STATSBEAT_FEATURES] || \"{}\").feature &\n        StatsbeatFeature.SHIM\n      ) {\n        this.initializedByShim = true;\n      }\n    } catch (error) {\n      InternalLogger.getInstance().error(\n        \"Failed to parse statsbeat config environment variable.\",\n        error,\n      );\n    }\n  }\n\n  public setStatsbeatFeatures = (statsbeatOptions: StatsbeatOptions) => {\n    // Merge old statsbeat options with new statsbeat options overriding any common properties\n    this.currentStatsbeatOptions = { ...this.currentStatsbeatOptions, ...statsbeatOptions };\n\n    let instrumentationBitMap = StatsbeatInstrumentation.NONE;\n    if (statsbeatOptions.azureSdk === true) {\n      instrumentationBitMap |= StatsbeatInstrumentation.AZURE_CORE_TRACING;\n    }\n    if (statsbeatOptions.mongoDb === true) {\n      instrumentationBitMap |= StatsbeatInstrumentation.MONGODB;\n    }\n    if (statsbeatOptions.mySql === true) {\n      instrumentationBitMap |= StatsbeatInstrumentation.MYSQL;\n    }\n    if (statsbeatOptions.postgreSql === true) {\n      instrumentationBitMap |= StatsbeatInstrumentation.POSTGRES;\n    }\n    if (statsbeatOptions.redis === true) {\n      instrumentationBitMap |= StatsbeatInstrumentation.REDIS;\n    }\n    if (statsbeatOptions.bunyan === true) {\n      instrumentationBitMap |= StatsbeatInstrumentation.BUNYAN;\n    }\n    if (statsbeatOptions.winston === true) {\n      instrumentationBitMap |= StatsbeatInstrumentation.WINSTON;\n    }\n\n    let featureBitMap = StatsbeatFeature.NONE;\n    featureBitMap |= StatsbeatFeature.DISTRO;\n\n    if (statsbeatOptions.browserSdkLoader === true) {\n      featureBitMap |= StatsbeatFeature.BROWSER_SDK_LOADER;\n    }\n    // Determines if the customer has activated the Live Metrics feature\n    if (statsbeatOptions.liveMetrics === true) {\n      featureBitMap |= StatsbeatFeature.LIVE_METRICS;\n    }\n\n    if (this.initializedByShim) {\n      featureBitMap |= StatsbeatFeature.SHIM;\n    }\n\n    try {\n      const currentFeaturesBitMap = Number(process.env[AZURE_MONITOR_STATSBEAT_FEATURES]);\n      if (!isNaN(currentFeaturesBitMap)) {\n        featureBitMap |= currentFeaturesBitMap;\n      }\n      process.env[AZURE_MONITOR_STATSBEAT_FEATURES] = JSON.stringify({\n        instrumentation: instrumentationBitMap,\n        feature: featureBitMap,\n      });\n    } catch (error) {\n      InternalLogger.getInstance().error(\"Failed call to JSON.stringify.\", error);\n    }\n  };\n}\n\n/**\n * Singleton Statsbeat instance.\n * @internal\n */\nexport function getInstance(): StatsbeatConfiguration {\n  if (!instance) {\n    instance = new StatsbeatConfiguration();\n  }\n  return instance;\n}\n"]}