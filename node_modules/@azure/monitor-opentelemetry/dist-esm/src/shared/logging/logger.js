// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { AzureLogger, createClientLogger, setLogLevel } from "@azure/logger";
import { diag, DiagLogLevel } from "@opentelemetry/api";
import { DiagFileConsoleLogger } from "./diagFileConsoleLogger";
export class Logger {
    static getInstance() {
        if (!Logger.instance) {
            Logger.instance = new Logger();
        }
        return Logger.instance;
    }
    constructor() {
        this.azureLogger = createClientLogger("@azure/monitor-opentelemetry");
        this.openTelemetryLogger = diag.createComponentLogger({
            namespace: "@azure/monitor-opentelemetry",
        });
        this.logToOpenTelemetry = true;
        this.logToAzureLogger = false;
        const otelLogLevelEnv = process.env.APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_LEVEL || process.env.OTEL_LOG_LEVEL;
        this.diagLevel = DiagLogLevel.WARN; // Default
        switch (otelLogLevelEnv) {
            case "ALL":
                this.diagLevel = DiagLogLevel.ALL;
                break;
            case "DEBUG":
                this.diagLevel = DiagLogLevel.DEBUG;
                break;
            case "ERROR":
                this.diagLevel = DiagLogLevel.ERROR;
                break;
            case "INFO":
                this.diagLevel = DiagLogLevel.INFO;
                break;
            case "NONE":
                this.diagLevel = DiagLogLevel.NONE;
                break;
            case "VERBOSE":
                this.diagLevel = DiagLogLevel.VERBOSE;
                break;
            case "WARN":
                this.diagLevel = DiagLogLevel.WARN;
                break;
        }
        // Set OpenTelemetry Logger
        const fileConsoleLogger = new DiagFileConsoleLogger();
        diag.setLogger(fileConsoleLogger, {
            logLevel: this.diagLevel,
            suppressOverrideMessage: true,
        });
        let azureLogLevelEnv = process.env.APPLICATIONINSIGHTS_INSTRUMENTATION_LOGGING_LEVEL || process.env.AZURE_LOG_LEVEL;
        let azureLogLevel = "warning"; // default
        switch (azureLogLevelEnv) {
            // Application Insights levels
            case "VERBOSE":
                azureLogLevel = "verbose";
                break;
            case "INFO":
                azureLogLevel = "info";
                break;
            case "WARN":
                azureLogLevel = "warning";
                break;
            case "ERROR":
                azureLogLevel = "error";
                break;
        }
        if (azureLogLevel) {
            setLogLevel(azureLogLevel);
        }
        // Override Azure logger
        AzureLogger.log = (...args) => {
            fileConsoleLogger.logMessage(...args);
        };
    }
    error(message, ...args) {
        if (this.logToAzureLogger) {
            this.azureLogger.error(message, args);
        }
        if (this.logToOpenTelemetry) {
            this.openTelemetryLogger.error(message, args);
        }
    }
    warn(message, ...args) {
        if (this.logToAzureLogger) {
            this.azureLogger.warning(message, args);
        }
        if (this.logToOpenTelemetry) {
            this.openTelemetryLogger.warn(message, args);
        }
    }
    info(message, ...args) {
        if (this.logToAzureLogger) {
            this.azureLogger.info(message, args);
        }
        if (this.logToOpenTelemetry) {
            this.openTelemetryLogger.info(message, args);
        }
    }
    debug(message, ...args) {
        if (this.logToAzureLogger) {
            this.azureLogger.verbose(message, args);
        }
        if (this.logToOpenTelemetry) {
            this.openTelemetryLogger.debug(message, args);
        }
    }
    verbose(message, ...args) {
        if (this.logToAzureLogger) {
            this.azureLogger.verbose(message, args);
        }
        if (this.logToOpenTelemetry) {
            this.openTelemetryLogger.verbose(message, args);
        }
    }
    setLogToAzureLogger(value) {
        this.logToAzureLogger = value;
    }
    setLogToOpenTelemetry(value) {
        this.logToOpenTelemetry = value;
    }
}
//# sourceMappingURL=logger.js.map